name: Download Test Report

on:
  workflow_dispatch:
    inputs:
      testName:
        description: 'Test suite name'
        required: true
        default: 'my-test-suite'
      timestamp:
        description: 'Report timestamp (optional, leave empty for latest)'
        required: false
        default: ''

jobs:
  download-report:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14.0'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🚀 Start TestForge API Server
        run: |
          nohup uvicorn app.main:app --host 0.0.0.0 --port 3000 > server.log 2>&1 &
          echo $! > server.pid
        env:
          PYTHONUNBUFFERED: "1"

      - name: ⏳ Wait for server health check
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Server is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: 📊 Download Test Report
        id: download
        continue-on-error: true
        run: |
          TEST_NAME="${{ github.event.inputs.testName }}"
          TIMESTAMP="${{ github.event.inputs.timestamp }}"
          
          if [ -n "$TIMESTAMP" ]; then
            DOWNLOAD_URL="http://localhost:3000/api/v1/download/$TEST_NAME/$TIMESTAMP"
            OUTPUT_FILE="${TEST_NAME}_Report_${TIMESTAMP}.zip"
            echo "Downloading specific report: $TIMESTAMP"
          else
            DOWNLOAD_URL="http://localhost:3000/api/v1/download/$TEST_NAME"
            OUTPUT_FILE="${TEST_NAME}_Report_latest.zip"
            echo "Downloading latest report"
          fi
          
          echo "URL: $DOWNLOAD_URL"
          echo "Output file: $OUTPUT_FILE"
          
          # Download with explicit output filename
          HTTP_CODE=$(curl -w "%{http_code}" -o "$OUTPUT_FILE" "$DOWNLOAD_URL")
          echo "HTTP Status: $HTTP_CODE"
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "✅ Download successful!"
            ls -lh "$OUTPUT_FILE"
            echo "downloaded=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Download failed with status $HTTP_CODE"
            echo "downloaded=false" >> $GITHUB_OUTPUT
            # Remove empty file if created
            rm -f "$OUTPUT_FILE"
          fi
          
          # List all files in current directory
          echo ""
          echo "All files in current directory:"
          ls -lh

      - name: 📤 Upload Test Report
        if: steps.download.outputs.downloaded == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ github.event.inputs.testName }}
          path: "*_Report_*.zip"
          retention-days: 30

      - name: 📋 Summary
        if: always()
        run: |
          echo "📊 Test Name: ${{ github.event.inputs.testName }}"
          echo "🕐 Timestamp: ${{ github.event.inputs.timestamp || 'latest' }}"
          echo "📦 Downloaded: ${{ steps.download.outputs.downloaded }}"
          echo ""
          if [ "${{ steps.download.outputs.downloaded }}" = "true" ]; then
            echo "✅ Report downloaded successfully and uploaded to artifacts"
          else
            echo "⚠️ Report not found or download failed"
            echo "💡 Make sure tests have been run for this testName first"
          fi

      - name: 🛑 Stop Server
        if: always()
        run: |
          [ -f server.pid ] && kill $(cat server.pid) 2>/dev/null || true
          cat server.log
