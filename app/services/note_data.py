"""
Centralized note data for Excel generation.
Used by combination_service and example_service to ensure consistency.
"""

from typing import Dict, List

def get_note_data() -> Dict[str, List[str]]:
    """
    Get standardized note sheet data with all prefix documentation.
    
    Returns:
        Dictionary with note sheet columns
    """
    return {
        "Category": [
            "API Configuration",
            "API Configuration",
            "Request - Headers",
            "Request - Path Parameters",
            "Request - Query Parameters",
            "Request - Query Parameters",
            "Request - Body",
            "Request - Body (Nested)",
            "Request - Body (Array)",
            "Response Validation - Status",
            "Response Validation - Body",
            "Response Validation - Body (Operators)",
            "Response Validation - Body (Type Casting)",
            "Response Validation - Headers",
            "Assertion Operators",
            "Assertion Operators",
            "Assertion Operators",
            "Assertion Operators",
            "Assertion Operators",
            "Assertion Operators",
            "Assertion Operators",
            "Data Types",
            "Data Types",
            "Data Types",
            "Data Types",
            "Examples - Basic",
            "Examples - Operators",
            "Examples - Type Casting",
            "Examples - Complex",
            "Notes",
            "Notes",
        ],
        "Prefix Format": [
            "[API]endpoint",
            "[API]Method",
            "[Request][Header]<header-name>",
            "[Request][Params]<param-name>",
            "[Request][Query]<query-name>",
            "[Request][Query]<query-name>",
            "[Request][Body]<field-name>",
            "[Request][Body]<parent>.<child>",
            "[Request][Body]<array>[<index>].<field>",
            "[Response][API]status",
            "[Response][Body]<json-path>",
            "[Response][Body]<json-path>:<operator>",
            "[Response][Body]<json-path>:<operator>[Type:<type>]",
            "[Response][Header]<header-name>",
            "eq (default)",
            "ne",
            "gt",
            "lt",
            "contains",
            "regex",
            "between",
            "[Type:int] or [Type:integer]",
            "[Type:float] or [Type:number]",
            "[Type:bool] or [Type:boolean]",
            "[Type:string] (default)",
            "[Response][Body]id",
            "[Response][Body]age:gt[Type:int]",
            "[Response][Body]active[Type:bool]",
            "[Response][Body]score:between[Type:float]",
            "",
            "",
        ],
        "Example": [
            "https://api.example.com/users/{id}",
            "POST",
            "x-api-key",
            "id",
            "page",
            "status",
            "username",
            "profile.name",
            "children[0].name",
            "200",
            "data.hasdata",
            "age:gt",
            "score:between[Type:float]",
            "x-token",
            "value == expected",
            "value != expected",
            "value > expected (numeric)",
            "value < expected (numeric)",
            "substring in value",
            "regex pattern match",
            "low <= value <= high",
            "age, quantity, count",
            "price, rating, percentage",
            "active, enabled, isValid",
            "name, email, description",
            "123",
            "18",
            "true",
            "50.5,80.9",
            "",
            "",
        ],
        "Sample Value": [
            "https://api.example.com/users/123",
            "GET / POST / PUT / DELETE / PATCH",
            "abc123xyz",
            "123",
            "1",
            "PAID",
            "john_doe",
            "John Doe",
            "Alice",
            "200 / 201 / 400 / 401 / 404 / 500",
            "true",
            "18",
            "50.5,80.9",
            "abc123",
            "Equal (exact match)",
            "Not equal",
            "Greater than",
            "Less than",
            "Contains substring",
            "Regular expression",
            "Between range (comma/colon/semicolon separated)",
            "Integer numbers",
            "Floating-point numbers",
            "Boolean values (true/false, 1/0, yes/no)",
            "String values (default if type not specified)",
            "Equality check (string)",
            "Checks age > 18 (integer)",
            "Checks boolean equality",
            "Checks 50.5 ≤ score ≤ 80.9 (float range)",
            "After generating combinations, add [Response] columns",
            "System will generate Robot Framework test cases with type-aware assertions",
        ],
        "Description": [
            "API endpoint URL (path params use {param_name})",
            "HTTP method for the request",
            "Custom request header (e.g., API key, authorization)",
            "Path parameter to replace in URL (Reserved for future use)",
            "Query parameter added to URL (?page=1&status=PAID)",
            "Multiple query params are combined automatically",
            "Simple field in request body JSON",
            "Nested object field (uses dot notation)",
            "Array element field (uses bracket notation)",
            "Expected HTTP status code for validation",
            "Expected value in response body (JSON path, default eq operator)",
            "Expected value with custom operator (e.g., gt, lt, contains)",
            "Expected value with operator and explicit type casting",
            "Expected response header value",
            "Exact equality (used when no operator specified)",
            "Not equal comparison",
            "Greater than (requires numeric type)",
            "Less than (requires numeric type)",
            "Check if value contains substring",
            "Match against regular expression pattern",
            "Check if value is within numeric range (requires Type:int or Type:float)",
            "For whole numbers (automatically converts to integer)",
            "For decimal numbers (automatically converts to float)",
            "For true/false values (accepts: true/false, 1/0, yes/no, y/n, t/f)",
            "For text values (no conversion, default behavior)",
            "Simple equality check without type conversion",
            "Age must be greater than 18 (compares as integers)",
            "Active flag must be true (compares as boolean)",
            "Score must be between 50.5 and 80.9 (compares as floats)",
            "Use operators and types to create powerful, flexible assertions",
            "All type conversions are automatic based on [Type:...] tag",
        ],
    }
